package bitwise.apps;

import java.util.concurrent.TimeUnit;

import javafx.beans.property.BooleanProperty;
import javafx.beans.property.SimpleBooleanProperty;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import bitwise.apps.events.AppLaunchedEvent;
import bitwise.apps.events.RequestFinishedEvent;
import bitwise.devices.kinds.DeviceKind;
import bitwise.devices.usb.ReadyDevice;
import bitwise.devices.usb.drivers.UsbDriver;
import bitwise.devices.usb.drivers.UsbGetDriverRequest;
import bitwise.engine.eventbus.Event;
import bitwise.engine.eventbus.EventNode;
import bitwise.engine.supervisor.Supervisor;

public abstract class App implements Runnable {
	private final AppID id;
	private final BooleanProperty isRunning = new SimpleBooleanProperty(true);
	private final ObservableList<Resource> resources = FXCollections.observableArrayList();
	private final ObservableList<Request> requests = FXCollections.observableArrayList();
	
	public App() {
		id = new AppID();
	}
	
	public final AppID getID() {
		return id;
	}
	
	public final BooleanProperty getIsRunning() {
		return isRunning;
	}
	
	public synchronized final void terminate() {
		if (isRunning.get()) {
			isRunning.set(false);
			for (Request request : requests) {
				synchronized (request) {
					if (request.getRequestServed().get())
						request.requestCancel();
					else {
						for (Resource resource : request.getNewResources()) {
							synchronized (resource) {
								if (resource.getResourceIsOpen().get())
									resource.resourceClose();
							}
						}
					}
				}
			}
			for (Resource resource : resources) {
				synchronized (resource) {
					if (resource.getResourceIsOpen().get())
						resource.resourceClose();
				}
			}
		}
	}
	
	@Override
	public boolean equals(Object o) {
		return (this == o); // Safe b/c uniquely determined by id
	}
	
	@Override
	public int hashCode() {
		return id.hashCode();
	}
	
	@Override
	public String toString() {
		return String.format("App<%08x> (%s)", id.getValue(), getName());
	}
	
	@Override
	public final void run() {
		try {
			EventNode lastProcessed = null;
			EventNode eventNode = Supervisor.getEventBus().getEventNode();
			Supervisor.getEventBus().publishEventToBus(new AppLaunchedEvent(this));
			do {
				if (lastProcessed != eventNode) {
					lastProcessed = eventNode;
					Event preEvent = lastProcessed.getEvent();
					// Check to see if the message concerns us
					// TODO: check resource changes, shutdown notifications
					synchronized (this) {
						if (preEvent instanceof RequestFinishedEvent<?>) {
							RequestFinishedEvent<?> event = (RequestFinishedEvent<?>)preEvent;
							Request request = event.getRequest();
							if (requests.contains(request)) {
								requests.remove(request);
								// Track any resources which were generated by the request
								resources.addAll(request.getNewResources());
							}
						}
					}
					// Pass the message along to the app
					handleEvent(preEvent);
				}
				if (isRunning.get()) {
					EventNode next = eventNode.waitLimitedOnNext(50, TimeUnit.MILLISECONDS);
					if (null != next)
						eventNode = next;
				}
			} while (isRunning.get());
		} catch (InterruptedException e) {
		}
		terminate();
		Supervisor.getApps().notifyAppTerminated(this);
	}
	
	protected final <D extends UsbDriver, K extends DeviceKind> UsbGetDriverRequest<D, K> getDriverRequest(ReadyDevice<D> ready, Class<K> asKind) {
		assert(null != ready);
		assert(null != asKind);
		UsbGetDriverRequest<D, K> req = new UsbGetDriverRequest<D, K>(this, ready, asKind);
		requests.add(req);
		return req;
	}
	
	public abstract String getName();
	public abstract void handleEvent(Event event) throws InterruptedException;
}
